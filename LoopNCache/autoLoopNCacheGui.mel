window -title "Create Looped Cache" loopedDialogWnd;
    columnLayout -adjustableColumn true;
        textFieldButtonGrp -label "Cache directory:" -text "" -buttonLabel "Browse..." -buttonCommand selectDir dirField;
        textFieldGrp -label "Cache name:" -text "cache" nameField;
        intFieldGrp -label "Starting frame:" -value1 30 startFrameField;
        intFieldGrp -label "Ending frame:" -value1 130 endFrameField;
        intFieldGrp -label "Blend overlap:" -value1 10 overlapField;
    rowLayout -numberOfColumns 2 -adjustableColumn 1;
        button -label "Create" -command runCache;
        button -label "Cancel" -command "deleteUI -window loopedDialogWnd";

global proc autoLoopNCache(string $cacheName, string $cacheFolder, int $loopStart, int $loopEnd, int $loopFrames) {
    if (catchQuiet(`doCreateNclothCache 5 { "2", "1", "10", "OneFile", "1", $cacheFolder, "1", $cacheName,"1", "add", "0", "1", "1","0","1","mcx" }`)) {
        confirmDialog -message "Please choose some nCloth objects to cache." -button "OK";
        return;
    }
    
    string $selectedObjs[] = `ls -selection`;
    for ($obj in $selectedObjs) {
        string $query = "*" + $cacheName + "*" + $obj + "*";
        string $cacheNodes[] = `ls $query`;
        if (`size $cacheNodes` > 0) {
            // We successfully cached this... whooooo!
            string $cacheNode = $cacheNodes[0];
            
            select $obj;
            string $cacheNameAttr = $cacheNode + ".cacheName";
            string $cacheXml = $cacheFolder + "/" + `getAttr $cacheNameAttr` + ".xml";
            print $cacheXml;
            
    		string $geo[];
    		$geo[0] = $obj;
            doImportCacheFile $cacheXml "xml" $geo {}; 
        }
        else {
            print "BOOOO.\n";
        }
        string $newCacheNodes[] = `ls $query`;
        if (`size $newCacheNodes` > 1) {
            string $startFrame0 = $newCacheNodes[0]  + ".startFrame";
            string $startFrame1 = $newCacheNodes[1]  + ".startFrame";
            string $sourceStart0 = $newCacheNodes[0]  + ".sourceStart";
            string $sourceStart1 = $newCacheNodes[1]  + ".sourceStart";
            string $sourceEnd0 = $newCacheNodes[0]  + ".sourceEnd";
            string $sourceEnd1 = $newCacheNodes[1]  + ".sourceEnd";
            setAttr $sourceStart0 $loopStart;
            setAttr $sourceStart1 $loopStart;
            setAttr $sourceEnd0 $loopEnd;
            setAttr $sourceEnd1 ($loopEnd - $loopFrames);
            int $ofs = $loopStart - ($loopEnd - $loopStart - $loopFrames) - 1;
            setAttr $startFrame0 $ofs;
            setAttr $startFrame1 $loopStart;
            
            string $allCacheBlends[] = `ls -type cacheBlend`;
            for ($cb in $allCacheBlends) {
                string $cacheBlendAttr0 = $cb + "." + $newCacheNodes[0];
                string $cacheBlendAttr1 = $cb + "." + $newCacheNodes[1];
                string $cacheBlendKeyProp0 = $cb + ".cd[0].w";
                string $cacheBlendKeyProp1 = $cb + ".cd[1].w";
                
                if (!(catchQuiet(`listAttr $cacheBlendAttr0`)) && !(catchQuiet(`listAttr $cacheBlendAttr1`))) {
                    currentTime 1;
                    setAttr $cacheBlendAttr0 1.0;
                    setAttr $cacheBlendAttr1 0.0;
                    
                    setKeyframe { $cacheBlendKeyProp0, $cacheBlendKeyProp1 };
                    
                    currentTime $loopStart;
                    setAttr $cacheBlendAttr0 1.0;
                    setAttr $cacheBlendAttr1 0.0;
                    
                    setKeyframe { $cacheBlendKeyProp0, $cacheBlendKeyProp1 };
                    
                    
                    currentTime ($loopStart + $loopFrames - 1);
                    setAttr $cacheBlendAttr0 0.0;
                    setAttr $cacheBlendAttr1 1.0;
                    
                    setKeyframe { $cacheBlendKeyProp0, $cacheBlendKeyProp1 };
                }
            }
        }
        else {
            print "BOOOO.\n";
        }
    }
    
    int $trueLoopEnd = $loopEnd - $loopFrames;
    playbackOptions -ast $loopStart -aet $trueLoopEnd;
}

global proc selectDir() {
    string $folders[] = `fileDialog2 -fileMode 2 -caption "Choose directory to save cache files"`;
    if (`size $folders` == 0) {
        return;
    }
    string $singleFolder = $folders[0];
    textFieldButtonGrp -e -text $singleFolder dirField;
}

global proc runCache() {
    int $startFrame = `intFieldGrp -q -value1 startFrameField`;
    int $endFrame = `intFieldGrp -q -value1 endFrameField`;
    int $overlap = `intFieldGrp -q -value1 overlapField`;
    string $cacheDir = `textFieldButtonGrp -q -text dirField`;
    string $cacheName = `textFieldGrp -q -text nameField`;
    
    if ($startFrame >= $endFrame) {
        confirmDialog -message "The start frame must come before the end frame." -button "OK";
    } else if ($overlap >= ($endFrame - $startFrame + 1)) {
        confirmDialog -message "The overlap must be less than the whole loop region." -button "OK";
    } else if (`size $cacheDir` == 0) {
        confirmDialog -message "Please choose a cache directory." -button "OK";
    } else if (`size $cacheName` == 0) {
        confirmDialog -message "Please specify the cache name." -button "OK";
    } else {
        autoLoopNCache($cacheName, $cacheDir, $startFrame, $endFrame, $overlap);
        deleteUI -window loopedDialogWnd;
    }
}

showWindow "loopedDialogWnd";